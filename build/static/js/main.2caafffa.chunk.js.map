{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","motion","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2caafffa.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\n\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyA3Q62YulETs6LOlyNWusIS9pqgHAkUXug\",\n    authDomain: \"pritam-firegram-56f12.firebaseapp.com\",\n    projectId: \"pritam-firegram-56f12\",\n    storageBucket: \"pritam-firegram-56f12.appspot.com\",\n    messagingSenderId: \"969535136836\",\n    appId: \"1:969535136836:web:259f4b3a6c2bdba6c38811\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import React, { useEffect, useState } from 'react';\nimport {projectFirestore} from '../firebase/config';\n\nconst useFirestore = (collection) =>{\n    const [docs, setDocs] = useState([]);\n\n    useEffect(()=>{\n\n    const unsub = projectFirestore.collection(collection)\n        .orderBy('createdAt', 'desc')\n            .onSnapshot((snap)=>{\n                let documents = [];\n                snap.forEach(doc => {\n                    documents.push({...doc.data(), id: doc.id})\n                });\n                setDocs(documents);\n\n            });\n\n\n        return () => unsub();\n    },[collection])\n\n    return{docs};\n}\n\n\nexport default useFirestore;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport {motion} from 'framer-motion';\n\nconst ImageGrid = ({setSelectedImg}) => {\n    const {docs} = useFirestore('images');\n    console.log(docs);\n\n    return(\n        <div className=\"img-grid\">\n            {docs && docs.map(docs => (\n                <motion.div className='img-wrap' key={docs.id}\n                    layout\n                    whileHover={{opacity:1}}\n                    onClick={()=> setSelectedImg(docs.url)}\n                >\n                    <motion.img src={docs.url} alt = 'uploaded pic'\n                        initial={{opacity:0}}\n                        animate={{opacity:1}}\n                        transition={{delay:1}}\n                    />\n\n                </motion.div>\n            ))}\n        </div>\n    )\n}\n\nexport default ImageGrid;","import React from 'react';\nimport {motion} from 'framer-motion';\n\nconst Modal = ({selectedImg, setSelectedImg}) => {\n\n\n    const handleClick=(e)=>{\n        if(e.target.classList.contains('backdrop')){\n            setSelectedImg(null);\n        }\n          \n\n\n    }\n\n    return(\n        <motion.div className=\"backdrop\" onClick={handleClick}\n            initial={{opacity:0}}\n            animate={{opacity:1}}\n        >\n            <motion.img src={selectedImg} alt=\"enlarged pic\"\n                initial={{y:\"-100vh\"}}\n                animate={{y:0}}\n            />\n        </motion.div>\n    )\n}\n\nexport default Modal;\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Edit your bio here.</p>\n    </div>\n  )\n}\n\nexport default Title;","import {useState, useEffect} from 'react';\nimport {projectFirestore, projectStorage, timestamp} from '../firebase/config';  //this is used to upload the file in the hook\n\nconst useStorage = (file) => {\n    const [progress, setProgress] = useState(0); //for the progress of the upload\n    const [error, setError] =useState(null); //for any errors from the upload\n    const [url, setUrl] = useState(null); //for the image URL that we get back from the storage after we've uploaded it\n//once the image is uploaded we have to get the URL  and store that in database and the database will contain a list of all image image URLs and then we can use that data to load the images in a React component\n\n\n\n\n\n\n    useEffect(() => {\n         \n        const storageRef = projectStorage.ref(file.name);  //to get a refernece where the file should be saved......inside the default firebase storage bucket with the proper file name\n        const collectionRef = projectFirestore.collection('images');\n        storageRef.put(file).on('state_changed', (snap)=>{\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(percentage);\n\n        }, (err)=>{\n            setError(err);\n        }, async()=>{\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timestamp();\n            collectionRef.add({ url, createdAt});\n            setUrl(url);\n        })\n    }, [file]); //this is the dependency....and everytime the dependency changes the funtion inside useEffect is gonna fire\n\n    return{ progress, url, error }\n}\n\nexport default useStorage;","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\nimport {motion} from 'framer-motion';\nconst ProgressBar = ({file, setFile})=>{\n    const {url, progress} = useStorage(file);\n    useEffect(() => {\n        if(url){\n            setFile(null);\n        }\n    }, [url, setFile])\n\n\n    return(\n        <motion.div className='progress-bar'\n            initial={{width:0}}\n            animate={{width:progress+'%'}}\n        ></motion.div>\n    )\n}\n\nexport default ProgressBar;\n","import React,{useState} from \"react\";\nimport ProgressBar from \"./ProgressBar\";\n\nconst UploadForm = () => {\n\n\n    const [file,setFile] = useState(null);\n    const types = ['image/png', 'image/jpeg', 'image/webp'];\n    const [error,setError] = useState(null);\n\n    const changeHandler = (e) =>{\n        // console.log('changeHandler triggered ');\n        let selected = e.target.files[0];\n        if(selected && types.includes(selected.type)){\n            setFile(selected);\n            setError('');//for the error message to go away if the correct file type is given\n            //console.log(file);\n        }\n\n        //console.log(file);\n        else{\n            setFile(null);\n            setError('Invalid format. Use png or jpeg file.');\n        }\n        \n    }\n    \n    return(\n        \n        <form>\n            <label>\n                <input type='file' onChange={changeHandler}/>\n                <span>+</span>\n            </label>\n            \n            <div className = 'output'>\n                {error && <div className='error'>{error}</div> }\n                {file && <div>{file.name}</div> }\n                {file && <ProgressBar file={file} setFile={setFile} />} \n\n            </div>\n        </form>\n    )\n}\n\nexport default UploadForm;","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\n\n\nfunction App() {\n\n  const [selectedImg, setSelectedImg] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm/>\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}